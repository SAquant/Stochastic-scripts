}
##############3######################################3
#After finding which patch and which transition occurs,
#we need to make changes in that patch
#############################################################
if(patch ==1)
{
patch_update(patch,state,count_1)
count_1=count_1+1
}
else if(patch ==2)
{
patch_update(patch,state,count_2)
count_2=count_2+1
}
else{
patch_update(patch,state,count_3)
count_3=count_3+1
}
tvec[i] = t
}
stepfun_vec=vector("numeric",6)
stepfun_vec[1] <- stepfun(tvec,svec_1)
stepfun_vec[2] <- stepfun(tvec,svec_2)
stepfun_vec[3] <- stepfun(tvec,svec_3)
stepfun_vec[1] <- stepfun(tvec,svec_1)
stepfun_vec[2] <- stepfun(tvec,svec_2)
stepfun_vec[3] <- stepfun(tvec,svec_3)
return (stepfun_vec)
}
steps <- patch_simulator(5,18,3,20)
# 1) Time fuction
FU_inverse <- function(u){
t <- log(u)/(b(i)+d(i))
t
}
# 2) Enter SIR parameters and functions
i0_1 <- 2 # number of initial infecteds in patch 1
i0_2 <- 10  # number of initial infecteds in patch 2
i0_3 <- 100  # number of initial infecteds in patch 3
initials <- c(i0_1,i0_2,i0_3)
B1_2 <- 0.8 #beteen patch 1 and 2
B1_1 <- 0.5 #within the patch
B2_2 <- 0.6 # within the patch
B3_3 <- 0.7 #within the patch
B1_3 <- 0.4 #beteen patch 1 and 3
B2_3 <- 0.3 #beteen patch 2 and 3
cr <- c(B1_1,B1_2,B1_3) # vector of contacts
N <- 3 #number of patches
N_1 <- 50 #number of people in patch 1
N_2 <- 50 #number of people in patch 2
N_3 <- 50 #number of people in patch 3
patch_pop <- c(N_1,N_2,N_3)# vector of patch populations
s_1 <- patch_pop[1] -2 # number of susceptibles patch 1
s_2 <- patch_pop[2] -3# number of susceptibles patch 2
s_3<- patch_pop[3] -10 # number of susceptibles patch 3
suscept <- c(s_1,s_2,s_3)
# This function updates the write patch with the simulation info cincerning it.
# takes as inputs the patch, state, number of patches
patch_update <- function(patchh,statee,count_1)
{
if(patchh == 1 )
{
pop <- patch_pop[1]
i_0 <- initials[1]
s_0 <- suscept[1]
ivec_1 = vector("numeric",pop)
svec_1 = vector("numeric",pop)
ivec_1[1] = i_0
svec_1[1] =s_0
if(state ==1)
{
i_0 = i_0 + 1
s_0 = s_0 -1
}
else if(state ==2)
{
i_0 = i_0 -1
}
else if(state ==3)
{
i_0 = i_0 -1
s_0 = s_0 +1
}
else{
s_0 = s_0 +1
}
ivec_1[count_1+1] = i_0
svec_1[count_1+1]=s_0
}
if(patchh == 2 )
{
pop <- patch_pop[2]
i_0 <- initials[2]
s_0 <- suscept[2]
ivec_2 = vector("numeric",pop)
svec_2 = vector("numeric",pop)
ivec_1[2] = i_0
svec_1[2] =s_0
if(state ==1)
{
i_0 = i_0 + 1
s_0 = s_0 -1
}
else if(state ==2)
{
i_0 = i_0 -1
}
else if(state ==3)
{
i_0 = i_0 -1
s_0 = s_0 +1
}
else{
s_0 = s_0 +1
}
ivec_2[count_1+1] = i_0
svec_2[count_1+1]=s_0
}
if(patchh == 3 )
{
pop <- patch_pop[3]
i_0 <- initials[3]
s_0 <- suscept[3]
ivec_3 = vector("numeric",pop)
svec_3 = vector("numeric",pop)
ivec_1[3] = i_0
svec_1[3] =s_0
if(state ==1)
{
i_0 = i_0 + 1
s_0 = s_0 -1
}
else if(state ==2)
{
i_0 = i_0 -1
}
else if(state ==3)
{
i_0 = i_0 -1
s_0 = s_0 +1
}
else{
s_0 = s_0 +1
}
ivec_3[count_1+1] = i_0
svec_3[count_1+1]=s_0
}
}
# My functions
# takes a number of infections x and susceptibles s and returns probability of an increase
B <- 1 #CONATACT RATE
rr <- 1/4 # Recovery rate
br_dr <- 1/4 #
infections <- function(x,s,N){
for(p in N){
new_inf <- rep(0,N)
new_inf[p] <- (cr[p]*x*s)/patch_pop[p] #(k,j)=(-1,1) for the patch
}
return (new_inf)
}
sus_deaths <- function(x,N){
for(p in N)
{
new_deaths <- rep(0,N)
new_deaths[p] <- br_dr*x #(k,j)=(0,-1) for the patch
}
return (new_deaths)
}
birth_by_sus <- function(x,N){
for(p in N)
{
new_birth_sus <- rep(0,N)
new_birth_sus[p] <- br_dr*x #(k,j)=(1,-1)for the patch.
}
return(new_birth_sus)
}
recovery <- function(x,s)
{
for(p in N)
{
rec <- rep(0,N)
rec[p] <- br_dr*(patch_pop[p]-x-s)
}
return (rec)
}
#The fuction takes the initial number of infacteds, susceptiples,the number of patchs, total pupulation P.
#need to still think about paths for the susceptibles and recovered
patch_simulator <- function(i_0,s_0,n,P){
tvec = vector("numeric",P)
count_1 <- 0
count_2 <- 0
count_3 <- 0
#pick a patch
t = 0
for(i in P)
{
#compute the transitions
I <- infections(i_0,s_0,n) #get prob of new infs
D <- sus_deaths(i_0,n)
B_S <- birth_by_sus(i_0,n)
R <- recovery(i_0,s_0)
t = t+rexp(1,0.001)
weights=rep(0,n)
for(p in n)
{
weights[p] <- (I[p])+D[p]+B_S[p]+R[p] #get sum of terms for each patch.
}
patch_totals <- sum(weights)
#Lets pick some patches
#sample(c(1,2,3),1,1,weights/patch_totals)
r <- runif(1)
if( weights[1]/patch_totals < r )
{
patch = 1
}
else if((weights[1]+weights[2])/patch_totals < r )
{
patch= 2
}
else
{
patch =3
}
#pick transition
if( I[patch]/weights[patch] < r)
{
state =1
}
else if((I[patch]+D[patch])/weights[patch] < r)
{
state = 2
}
else if((I[patch]+D[patch]+B_S[patch])/weights[patch] < r)
{
state =3
}
else if((I[patch]+D[patch]+B_S[patch]+R[patch])/weights[patch])
{
state =4
}
##############3######################################3
#After finding which patch and which transition occurs,
#we need to make changes in that patch
#############################################################
if(patch ==1)
{
patch_update(patch,state,count_1)
count_1=count_1+1
}
else if(patch ==2)
{
patch_update(patch,state,count_2)
count_2=count_2+1
}
else{
patch_update(patch,state,count_3)
count_3=count_3+1
}
tvec[i] = t
}
stepfun_vec=vector("numeric",6)
stepfun_vec[1] <- stepfun(tvec,svec_1)
stepfun_vec[2] <- stepfun(tvec,svec_2)
stepfun_vec[3] <- stepfun(tvec,svec_3)
stepfun_vec[1] <- stepfun(tvec,svec_1)
stepfun_vec[2] <- stepfun(tvec,svec_2)
stepfun_vec[3] <- stepfun(tvec,svec_3)
return (stepfun_vec)
}
steps <- patch_simulator(5,18,3,20)
# 1) Time fuction
FU_inverse <- function(u){
t <- log(u)/(b(i)+d(i))
t
}
# 2) Enter SIR parameters and functions
i0_1 <- 2 # number of initial infecteds in patch 1
i0_2 <- 10  # number of initial infecteds in patch 2
i0_3 <- 100  # number of initial infecteds in patch 3
initials <- c(i0_1,i0_2,i0_3)
B1_2 <- 0.8 #beteen patch 1 and 2
B1_1 <- 0.5 #within the patch
B2_2 <- 0.6 # within the patch
B3_3 <- 0.7 #within the patch
B1_3 <- 0.4 #beteen patch 1 and 3
B2_3 <- 0.3 #beteen patch 2 and 3
cr <- c(B1_1,B1_2,B1_3) # vector of contacts
N <- 3 #number of patches
N_1 <- 50 #number of people in patch 1
N_2 <- 50 #number of people in patch 2
N_3 <- 50 #number of people in patch 3
patch_pop <- c(N_1,N_2,N_3)# vector of patch populations
s_1 <- patch_pop[1] -2 # number of susceptibles patch 1
s_2 <- patch_pop[2] -3# number of susceptibles patch 2
s_3<- patch_pop[3] -10 # number of susceptibles patch 3
suscept <- c(s_1,s_2,s_3)
# This function updates the write patch with the simulation info cincerning it.
# takes as inputs the patch, state, number of patches
patch_update <- function(patchh,statee,count_1)
{
if(patchh == 1 )
{
pop <- patch_pop[1]
i_0 <- initials[1]
s_0 <- suscept[1]
ivec_1 = vector("numeric",pop)
svec_1 = vector("numeric",pop)
ivec_1[1] = i_0
svec_1[1] =s_0
if(state ==1)
{
i_0 = i_0 + 1
s_0 = s_0 -1
}
else if(state ==2)
{
i_0 = i_0 -1
}
else if(state ==3)
{
i_0 = i_0 -1
s_0 = s_0 +1
}
else{
s_0 = s_0 +1
}
ivec_1[count_1+1] = i_0
svec_1[count_1+1]=s_0
}
if(patchh == 2 )
{
pop <- patch_pop[2]
i_0 <- initials[2]
s_0 <- suscept[2]
ivec_2 = vector("numeric",pop)
svec_2 = vector("numeric",pop)
ivec_1[2] = i_0
svec_1[2] =s_0
if(state ==1)
{
i_0 = i_0 + 1
s_0 = s_0 -1
}
else if(state ==2)
{
i_0 = i_0 -1
}
else if(state ==3)
{
i_0 = i_0 -1
s_0 = s_0 +1
}
else{
s_0 = s_0 +1
}
ivec_2[count_1+1] = i_0
svec_2[count_1+1]=s_0
}
if(patchh == 3 )
{
pop <- patch_pop[3]
i_0 <- initials[3]
s_0 <- suscept[3]
ivec_3 = vector("numeric",pop)
svec_3 = vector("numeric",pop)
ivec_1[3] = i_0
svec_1[3] =s_0
if(state ==1)
{
i_0 = i_0 + 1
s_0 = s_0 -1
}
else if(state ==2)
{
i_0 = i_0 -1
}
else if(state ==3)
{
i_0 = i_0 -1
s_0 = s_0 +1
}
else{
s_0 = s_0 +1
}
ivec_3[count_1+1] = i_0
svec_3[count_1+1]=s_0
}
}
# My functions
# takes a number of infections x and susceptibles s and returns probability of an increase
B <- 1 #CONATACT RATE
rr <- 1/4 # Recovery rate
br_dr <- 1/4 #
infections <- function(x,s,N){
for(p in N){
new_inf <- rep(0,N)
new_inf[p] <- (cr[p]*x*s)/patch_pop[p] #(k,j)=(-1,1) for the patch
}
return (new_inf)
}
sus_deaths <- function(x,N){
for(p in N)
{
new_deaths <- rep(0,N)
new_deaths[p] <- br_dr*x #(k,j)=(0,-1) for the patch
}
return (new_deaths)
}
birth_by_sus <- function(x,N){
for(p in N)
{
new_birth_sus <- rep(0,N)
new_birth_sus[p] <- br_dr*x #(k,j)=(1,-1)for the patch.
}
return(new_birth_sus)
}
recovery <- function(x,s)
{
for(p in N)
{
rec <- rep(0,N)
rec[p] <- br_dr*(patch_pop[p]-x-s)
}
return (rec)
}
#The fuction takes the initial number of infacteds, susceptiples,the number of patchs, total pupulation P.
#need to still think about paths for the susceptibles and recovered
patch_simulator <- function(i_0,s_0,n,P){
tvec = vector("numeric",P)
count_1 <- 0
count_2 <- 0
count_3 <- 0
#pick a patch
t = 0
for(i in P)
{
#compute the transitions
I <- infections(i_0,s_0,n) #get prob of new infs
D <- sus_deaths(i_0,n)
B_S <- birth_by_sus(i_0,n)
R <- recovery(i_0,s_0)
t = t+rexp(1,0.001)
weights=rep(0,n)
for(p in n)
{
weights[p] <- (I[p])+D[p]+B_S[p]+R[p] #get sum of terms for each patch.
}
patch_totals <- sum(weights)
#Lets pick some patches
#sample(c(1,2,3),1,1,weights/patch_totals)
r <- runif(1)
if( weights[1]/patch_totals < r )
{
patch = 1
}
else if((weights[1]+weights[2])/patch_totals < r )
{
patch= 2
}
else
{
patch =3
}
#pick transition
r <- runif(1)
if(I[patch]/weights[patch] < r)
{
state =1
}
else if((I[patch]+D[patch])/weights[patch] < r)
{
state = 2
}
else if((I[patch]+D[patch]+B_S[patch])/weights[patch] < r)
{
state =3
}
else if((I[patch]+D[patch]+B_S[patch]+R[patch])/weights[patch])
{
state =4
}
##############3######################################3
#After finding which patch and which transition occurs,
#we need to make changes in that patch
#############################################################
if(patch ==1)
{
patch_update(patch,state,count_1)
count_1=count_1+1
}
else if(patch ==2)
{
patch_update(patch,state,count_2)
count_2=count_2+1
}
else{
patch_update(patch,state,count_3)
count_3=count_3+1
}
tvec[i] = t
}
stepfun_vec=vector("numeric",6)
stepfun_vec[1] <- stepfun(tvec,svec_1)
stepfun_vec[2] <- stepfun(tvec,svec_2)
stepfun_vec[3] <- stepfun(tvec,svec_3)
stepfun_vec[1] <- stepfun(tvec,svec_1)
stepfun_vec[2] <- stepfun(tvec,svec_2)
stepfun_vec[3] <- stepfun(tvec,svec_3)
return (stepfun_vec)
}
steps <- patch_simulator(5,18,3,20)
